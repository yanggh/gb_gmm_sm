#ifndef __GB_fr_COMMON_H__
#define __GB_fr_COMMON_H__

#include "nbe_common.h"
#include "dict.h"

char _hex_buf[1024];
char _hex_desc_buf[1024];
char *_hex = NULL;
char *_hex_desc = NULL;

void control_field()
{
	int tmp;
	B8_BIT(tmp, 1, 2);
	B8_HEX();
	if (tmp == 0 || tmp == 2)  //I format
	{
		A_B8_BIT1(gbf, ns, "Transmitter send sequence number", 1, 7);
		A_B8_BIT1(gbf, spare, "Spare", 8, 8);
		SKIP(1);

		B8_HEX();
		A_B8_BIT1(gbf, nr, "Transmitter receive sequence number", 1, 7);
		A_B8_BIT3(gbf, p_f, "Poll bit", 8, 8, p_dict);
		SKIP(1);
	}
	else if (tmp == 3)   //U format
	{
		int tmp1;
		B8_BIT(tmp1, 5, 5);
		A_B8_BIT1(gbf, m1, "Modifier function bit", 6, 8);
		A_B8_BIT3(gbf, p_f, "Final bit", 5, 5, p_dict);
		A_B8_BIT1(gbf, m2, "Modifier function bit", 3, 4);
		A_B8_BIT1(gbf, spare, "Spare", 1, 2);
		SKIP(1);
	}
	else if (tmp == 1)   //S format
	{
		A_B8_BIT1(gbf, reserved, "Reserved", 5, 8);
		A_B8_BIT1(gbf, su, "Supervisory function bit", 3, 4);
		A_B8_BIT1(gbf, spare, "Spare", 1, 2);
		SKIP(1);

		B8_HEX();
		A_B8_BIT1(gbf, nr, "Transmitter receive sequence number", 1, 8);
		A_B8_BIT3(gbf, p_f, "Final bit", 8, 8, p_dict);
		SKIP(1);
	}
}

void pvc_status()
{
    char buf[100];
	memset(buf , 0x00, sizeof(buf));
    int tmp, tmp1, tmp2, data_link;
	B8_HEX();
    A_B8_BIT1(gbf, pvc_status, "PVC status", 1, 8);
    SKIP(1);

	B8_BIT(tmp, 1, 8);
	B8_HEX();
    A_B8_BIT1(gbf, pvc_status_contents_l, "Length of PVC status contents", 1, 8);
    SKIP(1);

	B8_BIT(tmp1, 1, 6);
	B8_HEX();
    A_B8_BIT1(gbf, ext, "Ext", 8, 8);
    A_B8_BIT1(gbf, spare, "Spare", 7, 7);
    A_B8_BIT1(gbf, data_link_c_i, "Data link connection identifier", 1, 6);
	SKIP(1);

	B8_HEX();
	B8_BIT(tmp, 8, 8);
	B8_BIT(tmp2, 4, 7);
	data_link = (tmp1 << 4) + tmp2;
	sprintf((char *)buf, "%d", data_link);
    A_B8_BIT1(gbf, ext, "Ext", 8, 8);
    A_B8_BIT2(gbf, data_link_c_i, "Data link connection identifier", 4, 7, buf);
    A_B8_BIT1(gbf, spare, "Spare", 1, 3);
	SKIP(1);

	if(tmp == 0)
	{
	    B8_HEX();
		A_B8_BIT1(gbf, spare, "Spare", 1, 8);
		SKIP(1);

	    B8_HEX();
		A_B8_BIT1(gbf, spare, "Spare", 1, 8);
		SKIP(1);
	}

	B8_HEX();
	A_B8_BIT1(gbf, ext, "Ext", 8, 8);
	A_B8_BIT1(gbf, spare, "Spare", 5, 7);
	B8_BIT(tmp, 4, 4);
	if (tmp == 0)
		A_B8_BIT2(gbf, new, "New", 4, 4, "PVC is already present");
	else
		A_B8_BIT2(gbf, new, "New", 4, 4, "PVC is new");
	B8_BIT(tmp, 3, 3);
	if (tmp == 0)
		A_B8_BIT2(gbf, delete, "Delete", 3, 3, "PVC is configured");
	else
		A_B8_BIT2(gbf, delete, "Delete", 3, 3, "PVC is deleted");
	B8_BIT(tmp, 2, 2);
	if (tmp == 0)
		A_B8_BIT2(gbf, active, "Actile", 2, 2, "PVC is inactive");
	else
		A_B8_BIT2(gbf, active, "Active", 2, 2, "PVC is active");
	A_B8_BIT1(gbf, reserved, "Reserved", 1, 1);
	SKIP(1);
}

void link_intefrity_verification()
{
	B8_HEX();
	A_B8_BIT1(gbf, link_intefrity_v, "Link integrity verification", 1, 8); 
	SKIP(1);

	B8_HEX();
	A_B8_BIT1(gbf, link_intefrity_v_l, "Length of link integrity verification contents", 1, 8); 
	B8_HEX();
	SKIP(1);

	B8_HEX();
	A_B8_BIT1(gbf, send_seq_num, "Send sequence number", 1, 8); 
	SKIP(1);

	B8_HEX();
	A_B8_BIT1(gbf, receive seq_num, "Receive sequence number", 1, 8); 
	SKIP(1);
}

void status()
{
    int tmp;
	B8_HEX();
    A_B8_BIT2(gbf, msg_type, "Message type", 1, 8, "STATUS");
    SKIP(1);

	B8_HEX();
    A_B8_BIT1(gbf, report_type, "Report type", 1, 8);
    SKIP(1);

	B8_HEX();
    A_B8_BIT1(gbf, report_type_contents_l, "Length of report type contents", 1, 8);
    SKIP(1);

	B8_HEX();
    B8_BIT(tmp, 1, 8);
    if (tmp == 0)
	{
        A_B8_BIT2(gbf, report_type, "Report Type", 1, 8, "Full status (status of all PVCs on the bearer channel)");
        SKIP(1);

		link_intefrity_verification();
		pvc_status();
	}
    else if (tmp == 1)
	{
        A_B8_BIT2(gbf, report_type, "Report Type", 1, 8, "Link integrity verification only");
        SKIP(1);

		link_intefrity_verification();
	}
    else if (tmp == 2)
	{
        A_B8_BIT2(gbf, report_type, "Report Type", 1, 8, "Single PVC asynchronous status");
        SKIP(1);

		pvc_status();
	}
    else
    {
        A_B8_BIT2(gbf, report_type, "Report Type", 1, 8, "reserved");
        SKIP(1);
    }
}

void status_enquiry()
{
    int tmp;
	B8_HEX();
    A_B8_BIT2(gbf, msg_type, "Message type", 1, 8, "STATUS ENQUIRY");
    SKIP(1);

	B8_HEX();
    A_B8_BIT1(gbf, report_type, "Report type", 1, 8);
    SKIP(1);

	B8_HEX();
    A_B8_BIT1(gbf, report_type_contents_l, "Length of report type contents", 1, 8);
    SKIP(1);

	B8_HEX();
	B8_BIT(tmp, 1, 8);
    if (tmp == 0)
        A_B8_BIT2(gbf, report_type, "Report Type", 1, 8, "Full status (status of all PVCs on the bearer channel)");
    else if (tmp == 1)
        A_B8_BIT2(gbf, report_type, "Report Type", 1, 8, "Link integrity verification only");
    else if (tmp == 2)
        A_B8_BIT2(gbf, report_type, "Report Type", 1, 8, "Single PVC asynchronous status");
    else
        A_B8_BIT2(gbf, report_type, "Report Type", 1, 8, "reserved");
    SKIP(1);
	
	link_intefrity_verification();
}


void fr_layer(uint32_t len)
{
	BEGIN_ELEMENT("FR Layer", fr_layer); 
	int tmp, dlci_value, dlci_tmp0, dlci_tmp1, dlci_tmp2, dlci_tmp3;
    uint32_t pos;
    char buf[100];
	memset(buf , 0x00, sizeof(buf));

    B8_HEX(); 
    B8_BIT(tmp, 2, 2);
    B8_BIT(dlci_tmp0, 3, 8);
    A_B8_BIT1(gbf, upper_dlci, "Upper DLCI", 3, 8); 
    if (tmp == 0)
        A_B8_BIT2(gbf, cr, "Command response bit (C/R)", 2, 2, "Command"); 
    else
        A_B8_BIT2(gbf, cr, "Command response bit (C/R)", 2, 2, "Response"); 
    A_B8_BIT2(gbf, ea, "Address field extension bit", 1, 1, "Another Octet follows"); 
    SKIP(1); 

    B8_BIT(flag, 1, 1);
    if(flag == 1)   //Default address field format (2 octets)
    {
        B8_HEX(); 
        B8_BIT(tmp, 2, 2);
		B8_BIT(dlci_tmp1, 5, 8);
		dlci_value = (dlci_tmp0 << 4) + dlci_tmp1;
		sprintf((char *)buf, "%d", dlci_value);
        A_B8_BIT2(gbf, lower_dlci, "Lower DLCI", 5, 8, buf); 
        A_B8_BIT1(gbf, fecn, "FECN", 4, 4); 
        A_B8_BIT1(gbf, becn, "BECN", 3, 3); 
        if (tmp == 0)
            A_B8_BIT2(gbf, de, "Discard eligibility indicator", 2, 2, "Can't be discard"); 
        else
            A_B8_BIT2(gbf, de, "Discard eligibility indicator", 2, 2, "Discard"); 
        A_B8_BIT2(gbf, ea, "Address field extension bit", 1, 1, "Final Octet"); 
        SKIP(1);

        if (dlci_value >= 16 && dlci_value <= 1007)
	    {
            SET_STR(fr_msg, frame_type, "FR Layer"); 
            SET_STR(fr_msg, signal_type, "USER DATA");
	    	POS(pos);
	    	SET_V(fr_msg, next_pos, pos);
            SET_V(fr_msg, next_len, len - 2);
	    }

    }
    else
    {
        B8_HEX(); 
        B8_BIT(tmp, 2, 2);
		B8_BIT(dlci_tmp1, 5, 8);
        A_B8_BIT2(gbf, dlci_1, "DLCI", 5, 8, "DLCI"); 
        A_B8_BIT1(gbf, fecn, "FECN", 4, 4); 
        A_B8_BIT1(gbf, becn, "BECN", 3, 3); 
        if (tmp == 0)
            A_B8_BIT2(gbf, de, "Discard eligibility indicator", 2, 2, "Can't be discard"); 
        else
            A_B8_BIT2(gbf, de, "Discard eligibility indicator", 2, 2, "Discard"); 
        A_B8_BIT2(gbf, ea, "Address field extension bit", 1, 1, "Another Octet follows"); 
        SKIP(1);

        B8_BIT(flag, 1, 1);
        if(flag == 1)   //3 octets address field format
        {
            B8_HEX(); 
            B8_BIT(tmp, 2, 2);
			B8_BIT(dlci_tmp2, 3, 8);
			dlci_value = (dlci_tmp0 << 10) + (dlci_tmp1 << 6) + dlci_tmp2;
			sprintf((char *)buf, "%d", dlci_value);
            A_B8_BIT2(gbf, lower_dlci, "Lower DLCI", 3, 8, buf); 
            if (tmp == 0)
                A_B8_BIT2(gbf, dc, "DLCI or DL-CORE control indicator", 2, 2, "DLCI information"); 
            else
                A_B8_BIT2(gbf, dc, "DLCI or DL-CORE control indicator", 2, 2, "DL-CORE control information"); 
            A_B8_BIT2(gbf, ea, "Address field extension bit", 1, 1, "Final Octet"); 
            SKIP(1);

			if (dlci_value >= 1024 && dlci_value <= 64511)
	        {	
                SET_STR(fr_msg, frame_type, "FR Layer"); 
                SET_STR(fr_msg, signal_type, "USER DATA");
	        	POS(pos);
	        	SET_V(fr_msg, next_pos, pos);
                SET_V(fr_msg, next_len, len - 3);
	        }
        }
        else   //4 octets address field format
        {
            B8_HEX(); 
			B8_BIT(dlci_tmp2, 2, 8);
            A_B8_BIT1(gbf, dlci_2, "DLCI", 2, 8); 
            A_B8_BIT2(gbf, ea, "Address field extension bit", 1, 1, "Another Octet follows"); 
            SKIP(1);

            B8_BIT(tmp, 2, 2);
			B8_BIT(dlci_tmp3, 3, 8);
			dlci_value = (dlci_tmp0 << 17) + (dlci_tmp1 << 13) + (dlci_tmp2 << 6) + dlci_tmp3;
			sprintf((char *)buf, "%d", dlci_value);
            A_B8_BIT2(gbf, lower_dlci, "Lower DLCI", 3, 8, buf); 
            if (tmp == 0)
                A_B8_BIT2(gbf, dc, "DLCI or DL-CORE control indicator", 2, 2, "DLCI information"); 
            else
                A_B8_BIT2(gbf, dc, "DLCI or DL-CORE control indicator", 2, 2, "DL-CORE control information"); 
            A_B8_BIT2(gbf, ea, "Address field extension bit", 1, 1, "Final Octet"); 
            SKIP(1);

			if (dlci_value >= 2048 && dlci_value <= 129023)	
	        {
                SET_STR(fr_msg, frame_type, "FR Layer"); 
                SET_STR(fr_msg, signal_type, "USER DATA");
	        	POS(pos);
	        	SET_V(fr_msg, next_pos, pos);
                SET_V(fr_msg, next_len, len - 4);
	        }
        }
    }
	if (dlci_value == 0)
	{
		control_field();

		B8_HEX();
		A_B8_BIT1(gbf, pd, "Protocol discriminator", 1, 8);
        SKIP(1);

		B8_HEX();
        A_B8_BIT1(gbf, cr, "Call reference", 1, 8);
        SKIP(1);

		B8_HEX();
        B8_BIT(tmp, 1, 8);
        if (tmp == 125)
        {
            SET_STR(fr_msg, frame_type, "FR Layer"); 
            SET_STR(fr_msg, signal_type, "STATUS");
			status();
			//control_field();
        }
        else if(tmp == 117)
        {
            SET_STR(fr_msg, frame_type, "FR Layer"); 
            SET_STR(fr_msg, signal_type, "STATUS ENQUIRY");
			status_enquiry();
			//control_field();
        }
        else
        {
            A_B8_BIT2(gbf, msg_type, "Message Type", 1, 8, "Unknown");
            SKIP(1);
        }
    }
    END_ELEMENT(); 
}

#endif
